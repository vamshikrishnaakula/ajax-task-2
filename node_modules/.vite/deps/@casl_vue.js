import {
  PureAbility
} from "./chunk-4LB7LQ2G.js";
import {
  defineComponent,
  inject,
  provide,
  ref
} from "./chunk-PW22H3I3.js";
import "./chunk-5WWUZCGV.js";

// node_modules/@casl/vue/dist/es6m/index.mjs
function reactiveAbility(i) {
  if (i.hasOwnProperty("possibleRulesFor"))
    return i;
  const n = ref(true);
  i.on("updated", () => {
    n.value = !n.value;
  });
  const r = i.possibleRulesFor.bind(i);
  i.possibleRulesFor = (t, i2) => {
    n.value = n.value;
    return r(t, i2);
  };
  i.can = i.can.bind(i);
  i.cannot = i.cannot.bind(i);
  return i;
}
var o = Symbol("ability");
function useAbility() {
  const t = inject(o);
  if (!t)
    throw new Error("Cannot inject Ability instance because it was not provided");
  return t;
}
function provideAbility(t) {
  provide(o, reactiveAbility(t));
}
function s(t) {
  if ("a" in t)
    return "a";
  if ("this" in t)
    return "this";
  if ("an" in t)
    return "an";
  return "";
}
var u = defineComponent({ name: "Can", props: { I: String, do: String, a: [String, Function], an: [String, Function], this: [String, Function, Object], on: [String, Function, Object], not: Boolean, passThrough: Boolean, field: String }, setup(t, { slots: i }) {
  const n = t;
  let r = "do";
  let e = "on";
  if (!(r in t)) {
    r = "I";
    e = s(t);
  }
  if (!n[r])
    throw new Error("Neither `I` nor `do` prop was passed in <Can>");
  if (!i.default)
    throw new Error("Expects to receive default slot");
  const o2 = useAbility();
  return () => {
    const s2 = o2.can(n[r], n[e], n.field);
    const u2 = t.not ? !s2 : s2;
    if (!t.passThrough)
      return u2 ? i.default() : null;
    return i.default({ allowed: u2, ability: o2 });
  };
} });
function a(t, i, n) {
  if (!i || !(i instanceof PureAbility))
    throw new Error("Please provide an Ability instance to abilitiesPlugin plugin");
  t.provide(o, reactiveAbility(i));
  if (n && n.useGlobalProperties) {
    t.config.globalProperties.$ability = i;
    t.config.globalProperties.$can = i.can.bind(i);
  }
}
export {
  o as ABILITY_TOKEN,
  u as Can,
  a as abilitiesPlugin,
  provideAbility,
  useAbility
};
//# sourceMappingURL=@casl_vue.js.map
